/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using OpenAPIClientUtils = Org.OpenAPITools.Client.ClientUtils;
using Newtonsoft.Json.Linq;
using System.Reflection;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Dog
    /// </summary>
    [DataContract(Name = "Dog")]
    [JsonConverter(typeof(DogConverter))]
    public partial class Dog : Animal, IEquatable<Dog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Dog()
        {
            this.AdditionalProperites = new Dictionary<string, dynamic>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dog" /> class.
        /// </summary>
        /// <param name="breed">breed.</param>
        /// <param name="className">className (required) (default to &quot;Dog&quot;).</param>
        /// <param name="color">color (default to &quot;red&quot;).</param>
        public Dog(string breed = default(string), string className = "Dog", string color = "red") : base(className, color)
        {
            this.Breed = breed;
            this.AdditionalProperites = new Dictionary<string, dynamic>();
        }

        /// <summary>
        /// Gets or Sets Breed
        /// </summary>
        [DataMember(Name = "breed", EmitDefaultValue = false)]
        public string Breed { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalProperties
        /// </summary>
        [DataMember(Name = "AdditionalProperites", EmitDefaultValue = false)]
        public Dictionary<string, dynamic> AdditionalProperites { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dog {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Breed: ").Append(Breed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input as Dog).AreEqual;
        }

        /// <summary>
        /// Returns true if Dog instances are equal
        /// </summary>
        /// <param name="input">Instance of Dog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dog input)
        {
            return OpenAPIClientUtils.compareLogic.Compare(this, input).AreEqual;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Breed != null)
                    hashCode = hashCode * 59 + this.Breed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }

    /// <summary>
    /// Converter for additional properties
    /// </summary>
    public class DogConverter: JsonConverter
    {
        private readonly Type[] _types;

        /// <summary>
        /// Initializes a new instance of the <see cref="DogConverter" /> class.
        /// </summary>
        /// <param name="types">Types.</param>
        public DogConverter(params Type[] types)
        {
            _types = types;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DogConverter" /> class.
        /// </summary>
        public DogConverter()
        {
        }

        /// <summary>
        /// Function to the write JSON string
        /// </summary>
        /// <param name="writer">Json Writer</param>
        /// <param name="value">Object</param>
        /// <param name="serializer">Json Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            JObject jo = new JObject();
            Type type = value.GetType();

            foreach (PropertyInfo property in type.GetProperties())
            {
                if (property.CanRead)
                {
                    object propertyValue = property.GetValue(value, null);
                    foreach (DataMemberAttribute attribute in property.GetCustomAttributes(typeof(DataMemberAttribute), true))
                    {
                        if (propertyValue != null)
                        {
                            // flatten the dictionary if it's "AdditionalProperites"
                            if (attribute.Name == "AdditionalProperites")
                            {
                                foreach (var item in (Dictionary<string, dynamic>)propertyValue)
                                {
                                    jo.Add(item.Key, JToken.FromObject(item.Value, serializer));
                                }
                            }
                            else
                            {
                                jo.Add(attribute.Name, JToken.FromObject(propertyValue, serializer));
                            }
                        }
                    }
                }
            }
            jo.WriteTo(writer);
        }
    
        /// <summary>
        /// Function to convert JSON string into Dog 
        /// </summary>
        /// <param name="reader">Json Reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Input be serialized</param>
        /// <param name="serializer">Json Serializer</param>
        /// <returns>An instance of Dog serialized from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            //var result = base.ReadJson(reader, objectType, existingValue, serializer)
            return null;
        }

        /// <summary>
        /// A boolean property named CanRead
        /// </summary>
        public override bool CanRead
        {
            get { return false; }
        }

        /// <summary>
        /// Returns true if the input can be converted
        /// </summary>
        /// <returns>Boolean</returns>
        public override bool CanConvert(Type objectType)
        {
            return _types.Any(t => t == objectType);
        }
    }


}
