/*
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Converter for additional properties
    /// </summary>
    public class OpenAPIAdditionalPropertiesConverter: JsonConverter
    {
        private readonly Type[] _types;

        public OpenAPIAdditionalPropertiesConverter(params Type[] types)
        {
            _types = types;
        }

        public OpenAPIAdditionalPropertiesConverter()
        {
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            JObject jo = new JObject();
            Type type = value.GetType();

            foreach (PropertyInfo prop in type.GetProperties())
            {
                if (prop.CanRead)
                {
                    var attributes = prop.GetCustomAttributes(typeof(DataMemberAttribute), true);
                    object propVal = prop.GetValue(value, null);
                    foreach (DataMemberAttribute dma in attributes)
                    {
                        if (propVal != null)
                        {
                            if (dma.Name == "AdditionalProperites")
                            {
                                foreach (var item in (Dictionary<string, dynamic>)propVal)
                                {
                                    jo.Add(item.Key, JToken.FromObject(item.Value, serializer));
                                }
                            }
                            else
                            {
                                jo.Add(dma.Name, JToken.FromObject(propVal, serializer));
                            }
                        }
                    }
                }
            }
            jo.WriteTo(writer);
        }
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            //throw new NotImplementedException("Unnecessary because CanRead is false. The type will skip the converter.");
            return null;
        }

        public override bool CanRead
        {
            get { return false; }
        }

        public override bool CanConvert(Type objectType)
        {
            return _types.Any(t => t == objectType);
        }
    }
}
