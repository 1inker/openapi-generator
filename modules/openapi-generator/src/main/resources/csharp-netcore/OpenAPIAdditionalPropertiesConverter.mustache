{{>partial_header}}
using Newtonsoft.Json;
using System;
using System.Linq;

namespace {{packageName}}.Client
{
    /// <summary>
    /// Converter for additional properties
    /// </summary>
    public class OpenAPIAdditionalPropertiesConverter: JsonConverter
    {
        private readonly Type[] _types;

        public OpenAPIAdditionalPropertiesConverter(params Type[] types)
        {
            _types = types;
        }

        public OpenAPIAdditionalPropertiesConverter()
        {
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            //var date = value as DateTime;
            //var niceLookingDate = date.ToString("MMMM dd, yyyy 'at' H:mm tt");
            writer.WriteValue("hahahahha");
        }
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            //throw new NotImplementedException("Unnecessary because CanRead is false. The type will skip the converter.");
            return null;
        }

        public override bool CanRead
        {
            get { return false; }
        }

        public override bool CanConvert(Type objectType)
        {
            return _types.Any(t => t == objectType);
        }
    }
}
